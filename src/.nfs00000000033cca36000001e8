// Copyright (c) 2015, Robot Control and Pattern Recognition Group,
// Institute of Control and Computation Engineering
// Warsaw University of Technology
//
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Warsaw University of Technology nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: Dawid Seredynski
//

#include <ros/ros.h>
#include "ros/package.h"
#include <sensor_msgs/JointState.h>
#include <visualization_msgs/MarkerArray.h>
#include <tf/transform_broadcaster.h>
#include <boost/bind.hpp>

#include <string>
#include <stdlib.h>
#include <stdio.h>

#include "Eigen/Dense"
#include "Eigen/LU"

#include "planar5_dyn_model.h"
#include <collision_convex_model/collision_convex_model.h>
#include "kin_model/kin_model.h"
#include "marker_publisher.h"
#include "task_col.h"
#include "task_hand.h"
#include "task_jlc.h"
#include "random_uniform.h"
#include "reachability_map.h"
#include "rrt.h"

class TestDynamicModel {
    ros::NodeHandle nh_;
    ros::Publisher joint_state_pub_;
    MarkerPublisher markers_pub_;
    tf::TransformBroadcaster br;

    const double PI;

public:
    TestDynamicModel() :
        nh_(),
        PI(3.141592653589793),
        markers_pub_(nh_)
    {
        joint_state_pub_ = nh_.advertise<sensor_msgs::JointState>("/joint_states", 10);
    }

    ~TestDynamicModel() {
    }

    void publishJointState(const Eigen::VectorXd &q, const std::vector<std::string > &joint_names) {
        sensor_msgs::JointState js;
        js.header.stamp = ros::Time::now();
        int q_idx = 0;
        for (std::vector<std::string >::const_iterator it = joint_names.begin(); it != joint_names.end(); it++, q_idx++) {
            js.name.push_back(*it);
            js.position.push_back(q[q_idx]);
        }
        joint_state_pub_.publish(js);
    }

    void publishTransform(const KDL::Frame &T_B_F, const std::string &frame_id) {
        tf::Transform transform;
        transform.setOrigin( tf::Vector3(T_B_F.p.x(), T_B_F.p.y(), T_B_F.p.z()) );
        tf::Quaternion q;
        double qx, qy, qz, qw;
        T_B_F.M.GetQuaternion(q[0], q[1], q[2], q[3]);
        transform.setRotation(q);
        br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "base", frame_id));
    }

    int publishRobotModelVis(int m_id, const boost::shared_ptr<self_collision::CollisionModel> &col_model, const std::vector<KDL::Frame > &T) {
        for (self_collision::CollisionModel::VecPtrLink::const_iterator l_it = col_model->getLinks().begin(); l_it != col_model->getLinks().end(); l_it++) {
            KDL::Frame T_B_L = T[(*l_it)->index_];
            for (self_collision::Link::VecPtrCollision::const_iterator it = (*l_it)->collision_array.begin(); it != (*l_it)->collision_array.end(); it++) {
                KDL::Frame T_B_O = T_B_L * (*it)->origin;
                if ((*it)->geometry->getType() == self_collision::Geometry::CONVEX) {
                    // TODO
                }
                else if ((*it)->geometry->getType() == self_collision::Geometry::SPHERE) {
                    self_collision::Sphere *sphere = static_cast<self_collision::Sphere* >((*it)->geometry.get());
                    m_id = markers_pub_.addSinglePointMarker(m_id, T_B_O.p, 0, 1, 0, 1, sphere->radius*2, "base");
                }
                else if ((*it)->geometry->getType() == self_collision::Geometry::CAPSULE) {
                    self_collision::Capsule *capsule = static_cast<self_collision::Capsule* >((*it)->geometry.get());
                    m_id = markers_pub_.addCapsule(m_id, T_B_O, capsule->length, capsule->radius, "base");
                }
            }
        }
        return m_id;
    }

    void sampleSpace(KDL::Frame &sample) const {
//        Eigen::VectorXd quat(4);
//        randomUnitQuaternion(quat);
//        sample = KDL::Frame(KDL::Rotation::Quaternion(quat(0), quat(1), quat(2), quat(3)), KDL::Vector(randomUniform(-0.5,1.7), randomUniform(-1.5,1.5), 0.0));
        sample = KDL::Frame(KDL::Rotation::RotZ(randomUniform(-PI, PI)), KDL::Vector(randomUniform(-0.5,1.7), randomUniform(-1.5,1.5), 0.0));
    }

    void getPointOnPath(const std::list<Eigen::VectorXd > &path, double f, Eigen::VectorXd &x) const {

        if (path.size() == 0) {
            std::cout << "ERROR: getPointOnPath: path size is 0" << std::endl;
            return;
        }
        else if (path.size() == 1 || f < 0.0) {
            x = (*path.begin());
            return;
        }

        if (f > 1.0) {
            x = (*(--path.end()));
            return;
        }

        double length = 0.0;
        for (std::list<Eigen::VectorXd >::const_iterator it1 = path.begin(), it2=++path.begin(); it2 != path.end(); it1++, it2++) {
            double dist = ((*it1) - (*it2)).norm();
            length += dist;
        }

        double pos = length * f;

        for (std::list<Eigen::VectorXd >::const_iterator it1 = path.begin(), it2=++path.begin(); it2 != path.end(); it1++, it2++) {
            Eigen::VectorXd v = ((*it2) - (*it1));
            double dist = v.norm();
            if (pos - dist > 0) {
                pos -= dist;
            }
            else {
                x = (*it1) + pos * v / dist;
                return;
            }
        }
        x = (*(--path.end()));
    }

    bool checkCollision(const KDL::Frame &x, const std::vector<KDL::Frame > &links_fk, const boost::shared_ptr<self_collision::CollisionModel> &col_model) {
        // check collision with base and environment only
        std::set<int> excluded_link_idx;
        for (int l_idx = 0; l_idx < col_model->getLinksCount(); l_idx++) {
            const std::string &link_name = col_model->getLinkName(l_idx);
            if (link_name != "base" && link_name != "env_link") {
                excluded_link_idx.insert(col_model->getLinkIndex(link_name));
            }
        }

        // create dummy object
        boost::shared_ptr< self_collision::Collision > pcol = self_collision::createCollisionSphere(0.1, x);
        int base_link_idx = col_model->getLinkIndex("base");
        const KDL::Frame &T_B_L1 = links_fk[base_link_idx];

        return self_collision::checkCollision(pcol, T_B_L1, links_fk, col_model, excluded_link_idx);
    }

    void addDimension(std::vector<std::vector<int > > &vec, int dim) {
        std::vector<int > ret;
        std::vector<int > set;
        set.push_back(-1);
        set.push_back(0);
        set.push_back(1);
        if (dim == 0) {
            for (std::vector<int >::const_iterator it = set.begin(); it != set.end(); it++) {
                std::vector<int > a;
                a.push_back( (*it) );
                vec.push_back(a);
            }
        }
        else {
            for (std::vector<int >::const_iterator it = set.begin(); it != set.end(); it++) {
                std::vector<int > a;
                a.push_back( (*it) );
                vec.push_back(a);
            }
        }
    }

    void spin() {

        return;

        // initialize random seed
        srand(time(NULL));

        // dynamics model
        boost::shared_ptr<DynamicModel > dyn_model( new DynModelPlanar5() );

        std::string robot_description_str;
        std::string robot_semantic_description_str;
        nh_.getParam("/robot_description", robot_description_str);
        nh_.getParam("/robot_semantic_description", robot_semantic_description_str);

        //
        // collision model
        //
        boost::shared_ptr<self_collision::CollisionModel> col_model = self_collision::CollisionModel::parseURDF(robot_description_str);
	    col_model->parseSRDF(robot_semantic_description_str);
        col_model->generateCollisionPairs();

        // external collision objects - part of virtual link connected to the base link
        self_collision::Link::VecPtrCollision col_array;
//        col_array.push_back( self_collision::createCollisionCapsule(0.2, 0.3, KDL::Frame(KDL::Vector(1, 0.5, 0))) );
        col_array.push_back( self_collision::createCollisionCapsule(0.05, 0.3, KDL::Frame(KDL::Rotation::RotX(90.0/180.0*PI), KDL::Vector(1, 0.2, 0))) );
        col_array.push_back( self_collision::createCollisionCapsule(0.05, 0.2, KDL::Frame(KDL::Rotation::RotZ(90.0/180.0*PI)*KDL::Rotation::RotX(90.0/180.0*PI), KDL::Vector(0.9, 0.35, 0))) );
        if (!col_model->addLink("env_link", "base", col_array)) {
            ROS_ERROR("ERROR: could not add external collision objects to the collision model");
            return;
        }
        col_model->generateCollisionPairs();

        //
        // robot state
        //
        std::vector<std::string > joint_names;
        joint_names.push_back("0_joint");
        joint_names.push_back("1_joint");
        joint_names.push_back("2_joint");
        joint_names.push_back("3_joint");
        joint_names.push_back("4_joint");

        int ndof = joint_names.size();

        Eigen::VectorXd saved_q(ndof), saved_dq(ndof), saved_ddq(ndof);
        for (int q_idx = 0; q_idx < ndof; q_idx++) {
            saved_q[q_idx] = -0.1;
            saved_dq[q_idx] = 0.0;
            saved_ddq[q_idx] = 0.0;
        }

        std::string effector_name = "effector";
        int effector_idx = col_model->getLinkIndex(effector_name);

        //
        // kinematic model
        //
        boost::shared_ptr<KinematicModel> kin_model( new KinematicModel(robot_description_str, joint_names) );

        std::vector<KDL::Frame > links_fk(col_model->getLinksCount());

        boost::shared_ptr<DynamicsSimulatorHandPose > sim( new DynamicsSimulatorHandPose(ndof, effector_name, col_model, kin_model, dyn_model, joint_names) );
        sim->setState(saved_q, saved_dq, saved_ddq);

        RRT rrt(ndof, boost::bind(&TestDynamicModel::checkCollision, this, _1, links_fk, col_model),
                boost::bind(&TestDynamicModel::sampleSpace, this, _1), 0.05, 0.2, 0.4, kin_model, effector_name, sim );


        std::list<KDL::Frame > path_x;
        std::list<Eigen::VectorXd > path_q;
//        rrt.plan(saved_q, KDL::Frame(KDL::Vector(1, -0.5, 0)), 0.05, path_x, path_q, markers_pub_);
        rrt.plan(saved_q, KDL::Frame(KDL::Vector(1, 1.0, 0)), 0.05, path_x, path_q, markers_pub_);

        std::cout << "nodes in path: " << path_q.size() << std::endl;
        for (double f=0.0; f < 1.0; f += 0.001) {
            Eigen::VectorXd q(ndof);
            getPointOnPath(path_q, f, q);

            // calculate forward kinematics for all links
            for (int l_idx = 0; l_idx < col_model->getLinksCount(); l_idx++) {
                kin_model->calculateFk(links_fk[l_idx], col_model->getLinkName(l_idx), q);
            }

            publishJointState(q, joint_names);
            int m_id = 0;
            m_id = publishRobotModelVis(m_id, col_model, links_fk);
            markers_pub_.publish();

            ros::spinOnce();
            ros::Duration(0.01).sleep();
        }
//        sim->setState(saved_q, saved_dq, saved_ddq);
//        sim->setTarget(r_HAND_target);

/*
        // TEST: RRT
        while (ros::ok()) {

            Eigen::VectorXd xs(2), xe(2);
            sampleSpace(xs);
            sampleSpace(xe);

            if (!rrt.isStateValid(xs) || !rrt.isStateValid(xe)) {
                continue;
            }

            std::list<Eigen::VectorXd > path;
            rrt.plan(xs, xe, 0.05, path);

            int m_id = 100;
            m_id = rrt.addTreeMarker(markers_pub_, m_id);
            m_id = markers_pub_.addSinglePointMarker(m_id, KDL::Vector(xe(0), xe(1), 0), 0, 0, 1, 1, 0.05, "base");
            for (std::list<Eigen::VectorXd >::const_iterator it1 = path.begin(), it2=++path.begin(); it2 != path.end(); it1++, it2++) {
                KDL::Vector pos1((*it1)(0), (*it1)(1), 0), pos2((*it2)(0), (*it2)(1), 0);
                m_id = markers_pub_.addVectorMarker(m_id, pos1, pos2, 1, 1, 1, 1, 0.01, "base");
            }
            markers_pub_.addEraseMarkers(m_id, 2000);
            markers_pub_.publish();
            ros::spinOnce();
            ros::Duration(0.001).sleep();

            getchar();
        }

        return;
*/

        // loop variables
        ros::Time last_time = ros::Time::now();
        KDL::Frame r_HAND_target;
        int loop_counter = 10000;
        ros::Rate loop_rate(500);
        bool pose_reached  = false;
        int try_idx = 50;

        KDL::Twist diff_target;
        KDL::Frame r_HAND_start;
/*
        while (ros::ok()) {
            if (loop_counter > 1500 || pose_reached) {
                if (pose_reached || try_idx >= 2) {
                    if (try_idx >= 2) {
                        std::cout << "Could not reach the pose" << std::endl;
                    }
                    else {
                        std::cout << "Pose reached" << std::endl;
                    }
                    bool pose_found = false;
                    // set new random target pose
                    for (int i = 0; i < 100; i++) {
                        Eigen::VectorXd xe(2);
                        r_HAND_target = KDL::Frame(KDL::Rotation::RotZ(randomUniform(-PI, PI)), KDL::Vector(randomUniform(0,1.8), randomUniform(-1,1), 0));
                        xe(0) = r_HAND_target.p.x();
                        xe(1) = r_HAND_target.p.y();
                        if (rrt.isStateValid(xe)) {
                            pose_found = true;
                            break;
                        }
                    }
                    if (!pose_found) {
                        std::cout << "ERROR: could not find valid pose" << std::endl;
                        return;
                    }
                    publishTransform(r_HAND_target, "effector_dest");

                    sim->setTarget(r_HAND_target);

                    sim->getState(saved_q, saved_dq, saved_ddq);

                    kin_model->calculateFk(r_HAND_start, effector_name, saved_q);

                    diff_target = KDL::diff(r_HAND_start, r_HAND_target, 1.0);

                    try_idx = 0;
                    getchar();
                }
                else {
                    try_idx++;

                    if (try_idx == 1) {
                        double angle = diff_target.rot.Norm();
                        diff_target.rot = (angle - 360.0/180.0*PI) * diff_target.rot / angle;
                        std::cout << "trying other rotation... " << angle << std::endl;
                    }
                    else if (try_idx == 2) {
                        double angle = diff_target.rot.Norm();
                        diff_target.rot = (angle - 2.0*360.0/180.0*PI) * diff_target.rot / angle;
                        std::cout << "trying other rotation... " << angle << std::endl;
                    }

                    // another try
                    sim->setState(saved_q, saved_dq, saved_ddq);
                }

                pose_reached  = false;

                loop_counter = 0;
            }
            loop_counter += 1;

            double f_path = static_cast<double >(loop_counter)/800.0;
            if (f_path > 1.0) {
                f_path = 1.0;
            }
            KDL::Vector pt;
            pt = r_HAND_target.p * f_path + r_HAND_start.p * (1.0-f_path);
            markers_pub_.addSinglePointMarker(50, pt, 1, 0, 0, 1, 0.2, "base");

            KDL::Rotation target_rot = KDL::addDelta(r_HAND_start, diff_target, f_path).M;

            Eigen::VectorXd q(ndof), dq(ndof), ddq(ndof);
            sim->getState(q, dq, ddq);

            KDL::Frame r_HAND_current;
            kin_model->calculateFk(r_HAND_current, effector_name, q);

            KDL::Frame target_pos(target_rot, pt);
            KDL::Twist diff = KDL::diff(r_HAND_current, target_pos, 1.0);

            sim->oneStep(diff);
//            sim->oneStep();

            sim->getState(q, dq, ddq);

            // calculate forward kinematics for all links
            for (int l_idx = 0; l_idx < col_model->getLinksCount(); l_idx++) {
                kin_model->calculateFk(links_fk[l_idx], col_model->getLinkName(l_idx), q);
            }

            // publish markers and robot state with limited rate
            ros::Duration time_elapsed = ros::Time::now() - last_time;
            if (time_elapsed.toSec() > 0.05) {
                publishJointState(q, joint_names);
                int m_id = 0;
                m_id = publishRobotModelVis(m_id, col_model, links_fk);
                markers_pub_.publish();
                ros::Time last_time = ros::Time::now();
            }
            ros::spinOnce();
            loop_rate.sleep();
        }
*/
    }
};

int main(int argc, char** argv) {
    ros::init(argc, argv, "test_dynamic_model_cpp");
    TestDynamicModel test;
    test.spin();
    return 0;
}

